# telegram_bot.py - –†–∞–±–æ—á–∏–π –±–æ—Ç —Å KeyboardButton –¥–ª—è WebApp
import os
import sys
import json
import logging
import asyncio
from datetime import datetime
from typing import Dict, Any

from telegram import (
    Update, 
    KeyboardButton, 
    ReplyKeyboardMarkup, 
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes, 
    filters,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
MINI_APP_URL = os.environ.get('MINI_APP_URL', 'https://tap-tile-tango.onrender.com')

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    sys.exit(1)

logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
logger.info(f"üì± Mini App URL: {MINI_APP_URL}")

class TrainingBot:
    def __init__(self):
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
        self.materials = {
            'cohort-analysis-sql': {
                'table_url': 'https://docs.google.com/spreadsheets/d/1example123/export?format=xlsx',
                'table_filename': 'cohort_analysis_data.xlsx',
                'course_url': 'https://sqlcourse.example.com/cohort-analysis',
                'description': '–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
            }
        }

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º KeyboardButton –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ sendData
        keyboard = [
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
            [KeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )],
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            [
                KeyboardButton("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
                KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
            ]
        ]
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
        
        welcome_text = f"""
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä, {user.first_name}!</b>

–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–µ —Å –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.

<b>üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π  
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ò–ò
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

<b>üì± –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä"</b> –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.

<i>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: WebApp –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram!</i>
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp —á–µ—Ä–µ–∑ sendData"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
            web_app_data = update.message.web_app_data.data
            data = json.loads(web_app_data)
            
            user_id = update.effective_user.id
            action = data.get('action')
            
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp:")
            logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            logger.info(f"   –î–µ–π—Å—Ç–≤–∏–µ: {action}")
            logger.info(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if action == 'test':
                await self.handle_test_action(update, data)
            elif action == 'download_table':
                await self.handle_download_table(update, data)
            elif action == 'open_course':
                await self.handle_open_course(update, data)
            elif action == 'submit_homework':
                await self.handle_submit_homework(update, data)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                await update.message.reply_text(
                    f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                )
                
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )

    async def handle_test_action(self, update: Update, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        await update.message.reply_text(
            f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
            f"–î–∞–Ω–Ω—ã–µ: <code>{json.dumps(data, indent=2, ensure_ascii=False)}</code>",
            parse_mode='HTML'
        )

    async def handle_download_table(self, update: Update, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        task_id = data.get('taskId', 'cohort-analysis-sql')
        material = self.materials.get(task_id, {})
        
        if not material:
            await update.message.reply_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìä –°–∫–∞—á–∞—Ç—å {material['table_filename']}", 
                url=material['table_url']
            )],
            [InlineKeyboardButton(
                "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"""
üìä <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã!</b>

<b>–§–∞–π–ª:</b> {material['table_filename']}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {material['description']}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å" –Ω–∏–∂–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets  
3. –ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

<i>üí° –°–æ–≤–µ—Ç: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–∞–º–∏ –∏ —Å—É–º–º–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</i>
        """
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_open_course(self, update: Update, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—É—Ä—Å"""
        task_id = data.get('taskId', 'cohort-analysis-sql')
        material = self.materials.get(task_id, {})
        
        keyboard = [
            [InlineKeyboardButton(
                "üéì –û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å SQL", 
                url=material.get('course_url', '#')
            )],
            [InlineKeyboardButton(
                "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            """
üéì <b>–û–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å –≥–æ—Ç–æ–≤!</b>

<b>–í –∫—É—Ä—Å–µ –≤—ã –∏–∑—É—á–∏—Ç–µ:</b>
‚Ä¢ –û—Å–Ω–æ–≤—ã SQL –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏  
‚Ä¢ –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL

<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ~30 –º–∏–Ω—É—Ç

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è üëá
            """,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_submit_homework(self, update: Update, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        task_id = data.get('taskId', '')
        user_answer = data.get('userAnswer', '')
        
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        processing_msg = await update.message.reply_text(
            "üîÑ <b>–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ...</b>\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥",
            parse_mode='HTML'
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –≤—ã–∑–æ–≤ OpenAI)
        await asyncio.sleep(2)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await self.send_homework_result(update, user_answer)

    async def send_homework_result(self, update: Update, user_answer: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        score = 85
        
        result_text = f"""
üéâ <b>–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!</b>

üéØ <b>–û—Ü–µ–Ω–∫–∞: {score}/100</b>

<b>üìù –í–∞—à –æ—Ç–≤–µ—Ç:</b>
<i>{user_answer[:200]}...</i>

<b>‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>
–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. 

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑ Retention Rate –ø–æ –º–µ—Å—è—Ü–∞–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ LTV

<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b>
"–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" - –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É!
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="next_task"),
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")
            ],
            [InlineKeyboardButton(
                "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            result_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
            await update.message.reply_text(
                "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: 0\n"
                "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: -\n"
                "–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: -\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ!",
                parse_mode='HTML'
            )
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ
3. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ
5. –ù–∞–∂–º–∏—Ç–µ "–°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É"

<b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

<b>–ü—Ä–æ–±–ª–µ–º—ã?</b>
–ù–∞–ø–∏—à–∏—Ç–µ @your_support_bot
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "next_task":
            await query.edit_message_text(
                "üöÄ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å–∫–æ—Ä–æ!",
                reply_markup=None
            )
        elif query.data == "retry":
            keyboard = [[InlineKeyboardButton(
                "üîÑ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}/tasks/data-analysis/cohort-analysis-sql")
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑!",
                reply_markup=reply_markup
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TrainingBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
    application.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, 
        bot.handle_web_app_data
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        bot.handle_text_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.handle_callback_query))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üì± –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp —á–µ—Ä–µ–∑ KeyboardButton")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
