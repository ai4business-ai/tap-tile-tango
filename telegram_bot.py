# telegram_bot.py
import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, Any

import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –û–ë–ù–û–í–õ–ï–ù–û –° –ü–†–ê–í–ò–õ–¨–ù–´–ú URL
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', 'YOUR_OPENAI_API_KEY')
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://tap-tile-tango.onrender.com')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

class TrainingBot:
    def __init__(self):
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
        self.materials = {
            'cohort-analysis-sql': {
                'table_url': 'https://docs.google.com/spreadsheets/d/1example123/export?format=xlsx',
                'table_filename': 'cohort_analysis_data.xlsx',
                'course_url': 'https://sqlcourse.example.com/cohort-analysis',
                'description': '–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
            }
        }

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}, MINI_APP_URL: {MINI_APP_URL}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
        keyboard = [
            [KeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_text = f"""
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä, {user.first_name}!

–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–µ —Å –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.

üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ò–ò
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–ù–∞–∂–º–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!

üîó Mini App URL: {MINI_APP_URL}
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
2. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
3. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ò–ò
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
            web_app_data = update.message.web_app_data.data
            data = json.loads(web_app_data)
            
            user_id = update.effective_user.id
            action = data.get('action')
            
            logger.info(f"üî• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ MINI APP: {data}")
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action}")
            
            if action == 'download_table':
                await self.handle_download_table(update, data)
            elif action == 'open_course':
                await self.handle_open_course(update, data)
            elif action == 'submit_homework':
                await self.handle_submit_homework(update, data)
            else:
                logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç Mini App")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini App: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def handle_download_table(self, update: Update, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        logger.info("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
        
        task_id = data.get('taskId', 'cohort-analysis-sql')
        material = self.materials.get(task_id, {})
        
        if not material:
            await update.message.reply_text("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(
                f"üìä –°–∫–∞—á–∞—Ç—å {material['table_filename']}", 
                url=material['table_url']
            )],
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"""
üìä <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã!</b>

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {material['description']}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å" –Ω–∏–∂–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets  
3. –ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

‚ö†Ô∏è <i>–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö</i>
        """
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    async def handle_open_course(self, update: Update, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—É—Ä—Å"""
        logger.info("üéì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–∞")
        
        task_id = data.get('taskId', 'cohort-analysis-sql')
        material = self.materials.get(task_id, {})
        
        if not material:
            await update.message.reply_text("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        keyboard = [
            [InlineKeyboardButton(
                "üéì –û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å SQL", 
                url=material['course_url']
            )],
            [InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """
üéì <b>–û–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å –≥–æ—Ç–æ–≤!</b>

<b>–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –û—Å–Ω–æ–≤—ã SQL –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏  
‚Ä¢ –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPT –¥–ª—è SQL

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b>
–ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å üëá
        """
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    async def handle_submit_homework(self, update: Update, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        
        user_id = update.effective_user.id
        task_id = data.get('taskId', '')
        user_answer = data.get('userAnswer', '')
        
        if not user_answer.strip():
            await update.message.reply_text("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        processing_message = await update.message.reply_text(
            "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥"
        )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
            result = await self.check_homework_with_ai(task_id, user_answer)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await processing_message.delete()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.send_homework_result(update, result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def check_homework_with_ai(self, task_id: str, user_answer: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI"""
        logger.info(f"ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI –¥–ª—è –∑–∞–¥–∞—á–∏: {task_id}")
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        return {
            'score': 85,
            'feedback': '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.',
            'suggestions': [
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å retention rate',
                '–î–æ–±–∞–≤—å—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è'
            ]
        }

    async def send_homework_result(self, update: Update, result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
        score = result.get('score', 0)
        feedback = result.get('feedback', '–ù–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')
        suggestions = result.get('suggestions', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
        if score >= 90:
            emoji = "üèÜ"
            status = "–û—Ç–ª–∏—á–Ω–æ!"
            color = "üü¢"
        elif score >= 80:
            emoji = "‚≠ê"
            status = "–•–æ—Ä–æ—à–æ!"
            color = "üü°"  
        elif score >= 60:
            emoji = "üëç"
            status = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
            color = "üü†"
        else:
            emoji = "üìö"
            status = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
            color = "üî¥"
        
        message_text = f"""
{emoji} <b>{status}</b>

{color} <b>–û—Ü–µ–Ω–∫–∞: {score}/100</b>

<b>üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>
{feedback}
        """
        
        if suggestions:
            message_text += "\n\n<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for i, suggestion in enumerate(suggestions, 1):
                message_text += f"{i}. {suggestion}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        
        if score < 80:
            keyboard.append([InlineKeyboardButton(
                "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}/task-detail")
            )])
        
        keyboard.append([InlineKeyboardButton(
            "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
            web_app=WebAppInfo(url=MINI_APP_URL)
        )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä":
            keyboard = [[InlineKeyboardButton(
                "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å AI –¢—Ä–µ–Ω–∞–∂–µ—Ä", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üéØ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É AI –¢—Ä–µ–Ω–∞–∂–µ—Ä–∞!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä–∞ —Å MINI_APP_URL: {MINI_APP_URL}")
    
    bot = TrainingBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, bot.handle_web_app_data))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
