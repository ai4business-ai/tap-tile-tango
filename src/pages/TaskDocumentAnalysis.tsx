import React, { useState } from 'react';
import { ArrowLeft, FileText, Target, CheckCircle, Send, Bot, ChevronDown, ChevronUp } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { useChatAssistant } from '@/hooks/useChatAssistant';

const TaskDocumentAnalysis = () => {
  const navigate = useNavigate();
  const { sendMessage, isLoading } = useChatAssistant();
  const [userAnswer, setUserAnswer] = useState('');
  const [isChatMode, setIsChatMode] = useState(false);
  const [chatMessages, setChatMessages] = useState<{role: 'user' | 'tutor', content: string}[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  
  // States for controlling block visibility
  const [showDescription, setShowDescription] = useState(true);
  const [showTask, setShowTask] = useState(true);
  const [showCriteria, setShowCriteria] = useState(true);

  const handleSubmitTask = () => {
    if (userAnswer.trim()) {
      setIsChatMode(true);
      setChatMessages([
        {
          role: 'tutor',
          content: '–û—Ç–ª–∏—á–Ω–æ! –Ø –∏–∑—É—á–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–æ—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –¥–æ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?'
        }
      ]);
    }
  };

  const handleSendMessage = async () => {
    if (currentMessage.trim() && !isLoading) {
      const userMessage = currentMessage;
      setCurrentMessage('');
      
      // Add user message immediately
      setChatMessages(prev => [...prev, { role: 'user', content: userMessage }]);
      
      try {
        const tutorResponse = await sendMessage(
          userMessage, 
          '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: —Å–æ–∑–¥–∞–Ω–∏–µ executive summary –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ 20+ —Å—Ç—Ä–∞–Ω–∏—Ü'
        );
        
        // Add tutor response
        setChatMessages(prev => [...prev, { role: 'tutor', content: tutorResponse }]);
      } catch (error) {
        // Add error message
        setChatMessages(prev => [...prev, { 
          role: 'tutor', 
          content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' 
        }]);
      }
    }
  };


  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20 p-4 max-w-sm mx-auto">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <button 
          onClick={() => navigate('/skill-assignments/research')}
          className="w-8 h-8 flex items-center justify-center"
        >
          <ArrowLeft className="w-6 h-6 text-foreground" />
        </button>
        <div>
          <h1 className="text-xl font-semibold text-foreground">–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h1>
          <p className="text-sm text-muted-foreground">BASIC —É—Ä–æ–≤–µ–Ω—å</p>
        </div>
      </div>

      {/* Task Description */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center justify-between text-base">
            <div className="flex items-center gap-2">
              <FileText className="w-5 h-5 text-primary" />
              –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            </div>
            {userAnswer.trim() && !showDescription && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowDescription(true)}
                className="h-6 px-2"
              >
                <ChevronDown className="w-4 h-4" />
              </Button>
            )}
            {userAnswer.trim() && showDescription && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowDescription(false)}
                className="h-6 px-2"
              >
                <ChevronUp className="w-4 h-4" />
              </Button>
            )}
          </CardTitle>
        </CardHeader>
        {(!userAnswer.trim() || showDescription) && (
          <CardContent className="space-y-4">
            <p className="text-sm text-muted-foreground leading-relaxed">
              –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤–∞—à —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ª–∞–ª –≤–∞–º –≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (–∏–ª–∏ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ) —Å–æ —Å–ª–æ–≤–∞–º–∏: "–ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç–∞–º –≤–∞–∂–Ω–æ–≥–æ. –ú–Ω–µ –Ω—É–∂–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É —Å–æ–≤–µ—â–∞–Ω–∏—é". –£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ 20+ —Å—Ç—Ä–∞–Ω–∏—Ü.
            </p>
          </CardContent>
        )}
      </Card>

      {/* Task Requirements */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center justify-between text-base">
            <div className="flex items-center gap-2">
              <Target className="w-5 h-5 text-primary" />
              –í–∞—à–∞ –∑–∞–¥–∞—á–∞
            </div>
            {userAnswer.trim() && !showTask && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowTask(true)}
                className="h-6 px-2"
              >
                <ChevronDown className="w-4 h-4" />
              </Button>
            )}
            {userAnswer.trim() && showTask && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowTask(false)}
                className="h-6 px-2"
              >
                <ChevronUp className="w-4 h-4" />
              </Button>
            )}
          </CardTitle>
        </CardHeader>
        {(!userAnswer.trim() || showTask) && (
          <CardContent className="space-y-3">
            <div className="space-y-2">
              <h4 className="text-sm font-medium text-foreground">–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4>
              <ul className="space-y-1 text-sm text-muted-foreground">
                <li>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—ä–µ–º–æ–º 20+ —Å—Ç—Ä–∞–Ω–∏—Ü</li>
                <li>‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</li>
                <li>‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã</li>
                <li>‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Ç—Ä–µ–Ω–¥—ã</li>
                <li>‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
                <li>‚Ä¢ –í—Å–µ —ç—Ç–æ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ A4</li>
              </ul>
            </div>
          </CardContent>
        )}
      </Card>

      {/* Success Criteria */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center justify-between text-base">
            <div className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-primary" />
              –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            </div>
            {userAnswer.trim() && !showCriteria && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowCriteria(true)}
                className="h-6 px-2"
              >
                <ChevronDown className="w-4 h-4" />
              </Button>
            )}
            {userAnswer.trim() && showCriteria && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowCriteria(false)}
                className="h-6 px-2"
              >
                <ChevronUp className="w-4 h-4" />
              </Button>
            )}
          </CardTitle>
        </CardHeader>
        {(!userAnswer.trim() || showCriteria) && (
          <CardContent className="space-y-2">
            <ul className="space-y-1 text-sm text-muted-foreground">
              <li>‚Ä¢ Executive summary —á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ 2-3 –º–∏–Ω—É—Ç—ã</li>
              <li>‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç 5-7 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤</li>
              <li>‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–æ—Ç –≤–∞–∂–Ω–æ–≥–æ –∫ –¥–µ—Ç–∞–ª—è–º"</li>
              <li>‚Ä¢ –ü–æ–Ω—è—Ç–µ–Ω —á–µ–ª–æ–≤–µ–∫—É, –Ω–µ —á–∏—Ç–∞–≤—à–µ–º—É –æ—Ä–∏–≥–∏–Ω–∞–ª</li>
            </ul>
            <div className="mt-3 p-3 bg-blue-500/10 rounded-lg border border-blue-500/20">
              <p className="text-sm text-foreground font-medium">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</p>
              <p className="text-sm text-muted-foreground mt-1">
                –ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ –Ω–∞—É—á–∏—Ç—å –ò–ò –æ—Ç–ª–∏—á–∞—Ç—å –≤–∞–∂–Ω–æ–µ –æ—Ç –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏.
              </p>
            </div>
          </CardContent>
        )}
      </Card>

      {/* Answer Form */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            {isChatMode && <Bot className="w-5 h-5 text-primary" />}
            {isChatMode ? '–ß–∞—Ç —Å —Ç—å—é—Ç–æ—Ä–æ–º' : '–í–∞—à –æ—Ç–≤–µ—Ç'}
          </CardTitle>
          {isChatMode && (
            <button 
              onClick={() => setIsChatMode(false)}
              className="text-sm text-muted-foreground hover:text-foreground"
            >
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É
            </button>
          )}
        </CardHeader>
        <CardContent>
          {!isChatMode ? (
            <Textarea
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è executive summary..."
              className="min-h-[150px]"
            />
          ) : (
            <div className="space-y-4">
              {/* Chat Messages */}
              <div className="max-h-[300px] overflow-y-auto space-y-3">
                {chatMessages.map((message, index) => (
                  <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-[80%] p-3 rounded-lg text-sm ${
                      message.role === 'user' 
                        ? 'bg-primary text-primary-foreground' 
                        : 'bg-muted text-muted-foreground'
                    }`}>
                      {message.content}
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Message Input */}
              <div className="flex gap-2">
                <Input
                  value={currentMessage}
                  onChange={(e) => setCurrentMessage(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  className="flex-1"
                />
                <Button onClick={handleSendMessage} size="icon">
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Submit Button */}
      <div className="mb-4">
        <Button 
          onClick={handleSubmitTask}
          disabled={!userAnswer.trim()}
          className="w-full py-4 text-base font-medium"
        >
          <CheckCircle className="w-4 h-4 mr-2" />
          –°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        </Button>
      </div>
    </div>
  );
};

export default TaskDocumentAnalysis;