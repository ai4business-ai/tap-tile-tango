// src/lib/telegram-enhanced.ts - –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp

interface TelegramWebApp {
  initData: string;
  initDataUnsafe: any;
  version: string;
  platform: string;
  colorScheme: 'light' | 'dark';
  themeParams: any;
  isExpanded: boolean;
  viewportHeight: number;
  viewportStableHeight: number;
  isClosingConfirmationEnabled: boolean;
  isVerticalSwipesEnabled: boolean;
  headerColor: string;
  backgroundColor: string;
  BackButton: {
    isVisible: boolean;
    show(): void;
    hide(): void;
    onClick(callback: () => void): void;
    offClick(callback: () => void): void;
  };
  MainButton: {
    text: string;
    color: string;
    textColor: string;
    isVisible: boolean;
    isActive: boolean;
    setText(text: string): void;
    onClick(callback: () => void): void;
    offClick(callback: () => void): void;
    show(): void;
    hide(): void;
    enable(): void;
    disable(): void;
    showProgress(leaveActive?: boolean): void;
    hideProgress(): void;
  };
  ready(): void;
  expand(): void;
  close(): void;
  sendData(data: string): void;
  showPopup(params: any, callback?: (buttonId: string) => void): void;
  showAlert(message: string, callback?: () => void): void;
  showConfirm(message: string, callback?: (confirmed: boolean) => void): void;
}

declare global {
  interface Window {
    Telegram: {
      WebApp: TelegramWebApp;
    };
  }
}

export class TelegramAPIEnhanced {
  private static instance: TelegramAPIEnhanced;
  private webApp: TelegramWebApp | null;
  private isReady: boolean = false;

  private constructor() {
    this.webApp = this.initializeWebApp();
  }

  static getInstance(): TelegramAPIEnhanced {
    if (!TelegramAPIEnhanced.instance) {
      TelegramAPIEnhanced.instance = new TelegramAPIEnhanced();
    }
    return TelegramAPIEnhanced.instance;
  }

  private initializeWebApp(): TelegramWebApp | null {
    if (typeof window === 'undefined' || !window.Telegram?.WebApp) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return null;
    }

    const webApp = window.Telegram.WebApp;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp
    try {
      webApp.ready();
      webApp.expand();
      this.isReady = true;
      
      console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
        platform: webApp.platform,
        version: webApp.version,
        canSendData: typeof webApp.sendData === 'function'
      });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
      if (webApp.colorScheme === 'dark') {
        document.documentElement.classList.add('dark');
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      webApp.isClosingConfirmationEnabled = false;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp:', error);
    }

    return webApp;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
  isInTelegram(): boolean {
    return !!this.webApp && !!this.webApp.initData;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sendData
  canSendData(): boolean {
    return this.isInTelegram() && typeof this.webApp?.sendData === 'function';
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É —á–µ—Ä–µ–∑ sendData
  async sendDataToBot(data: any): Promise<boolean> {
    if (!this.canSendData()) {
      console.error('‚ùå sendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ KeyboardButton');
      await this.showAlert(
        '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä" –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º'
      );
      return false;
    }

    try {
      const jsonData = JSON.stringify(data);
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É:', data);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      this.webApp!.sendData(jsonData);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      await this.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      return false;
    }
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async showAlert(message: string): Promise<void> {
    return new Promise((resolve) => {
      if (this.webApp?.showAlert) {
        this.webApp.showAlert(message, () => resolve());
      } else {
        alert(message);
        resolve();
      }
    });
  }

  // –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async showConfirm(message: string): Promise<boolean> {
    return new Promise((resolve) => {
      if (this.webApp?.showConfirm) {
        this.webApp.showConfirm(message, (confirmed) => resolve(confirmed));
      } else {
        resolve(confirm(message));
      }
    });
  }

  // –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  showBackButton(callback: () => void): void {
    if (this.webApp?.BackButton) {
      this.webApp.BackButton.onClick(callback);
      this.webApp.BackButton.show();
    }
  }

  hideBackButton(): void {
    if (this.webApp?.BackButton) {
      this.webApp.BackButton.hide();
    }
  }

  // –†–∞–±–æ—Ç–∞ —Å –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
  showMainButton(text: string, callback: () => void): void {
    if (this.webApp?.MainButton) {
      this.webApp.MainButton.setText(text);
      this.webApp.MainButton.onClick(callback);
      this.webApp.MainButton.show();
    }
  }

  hideMainButton(): void {
    if (this.webApp?.MainButton) {
      this.webApp.MainButton.hide();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getDebugInfo() {
    return {
      isInTelegram: this.isInTelegram(),
      canSendData: this.canSendData(),
      platform: this.webApp?.platform || 'unknown',
      version: this.webApp?.version || 'unknown',
      hasInitData: !!this.webApp?.initData,
      initDataLength: this.webApp?.initData?.length || 0,
      isReady: this.isReady
    };
  }
}

// src/hooks/useTaskDetailFixed.ts - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { TelegramAPIEnhanced } from '@/lib/telegram-enhanced';

interface CheckResult {
  score: number;
  feedback: string;
  suggestions?: string[];
}

export const useTaskDetailFixed = () => {
  const navigate = useNavigate();
  const [userAnswer, setUserAnswer] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [checkResult, setCheckResult] = useState<CheckResult | null>(null);
  const [telegramAPI, setTelegramAPI] = useState<TelegramAPIEnhanced | null>(null);

  useEffect(() => {
    const tg = TelegramAPIEnhanced.getInstance();
    setTelegramAPI(tg);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    tg.showBackButton(() => {
      navigate('/tasks/data-analysis');
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üì± WebApp Debug Info:', tg.getDebugInfo());

    return () => {
      tg.hideBackButton();
      tg.hideMainButton();
    };
  }, [navigate]);

  const handleDownloadTable = async () => {
    if (!telegramAPI) return;

    const payload = {
      action: 'download_table',
      taskId: 'cohort-analysis-sql',
      timestamp: new Date().toISOString()
    };

    const success = await telegramAPI.sendDataToBot(payload);
    
    if (success) {
      await telegramAPI.showAlert('–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º');
    }
  };

  const handleOpenCourse = async () => {
    if (!telegramAPI) return;

    const payload = {
      action: 'open_course',
      taskId: 'cohort-analysis-sql',
      timestamp: new Date().toISOString()
    };

    const success = await telegramAPI.sendDataToBot(payload);
    
    if (success) {
      await telegramAPI.showAlert('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º');
    }
  };

  const handleSubmitHomework = async () => {
    if (!telegramAPI) return;

    if (!userAnswer.trim()) {
      await telegramAPI.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
      return;
    }

    setIsSubmitting(true);

    try {
      const payload = {
        action: 'submit_homework',
        taskId: 'cohort-analysis-sql',
        userAnswer: userAnswer,
        timestamp: new Date().toISOString()
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:', payload);

      const success = await telegramAPI.sendDataToBot(payload);
      
      if (success) {
        await telegramAPI.showAlert(
          '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.'
        );
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setUserAnswer('');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      await telegramAPI.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è');
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    userAnswer,
    setUserAnswer,
    isSubmitting,
    checkResult,
    handleDownloadTable,
    handleOpenCourse,
    handleSubmitHomework,
    navigate,
    telegramAPI
  };
};
