// src/lib/telegram.ts - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

interface TelegramWebApp {
  initData: string;
  initDataUnsafe: any;
  version: string;
  platform: string;
  colorScheme: 'light' | 'dark';
  themeParams: any;
  isExpanded: boolean;
  viewportHeight: number;
  viewportStableHeight: number;
  isClosingConfirmationEnabled: boolean;
  isVerticalSwipesEnabled: boolean;
  headerColor: string;
  backgroundColor: string;
  BackButton: {
    isVisible: boolean;
    show(): void;
    hide(): void;
    onClick(callback: () => void): void;
    offClick(callback: () => void): void;
  };
  MainButton: {
    text: string;
    color: string;
    textColor: string;
    isVisible: boolean;
    isActive: boolean;
    setText(text: string): void;
    onClick(callback: () => void): void;
    offClick(callback: () => void): void;
    show(): void;
    hide(): void;
    enable(): void;
    disable(): void;
    showProgress(leaveActive?: boolean): void;
    hideProgress(): void;
  };
  ready(): void;
  expand(): void;
  close(): void;
  sendData(data: string): void;
  showPopup(params: {
    title?: string;
    message: string;
    buttons?: Array<{
      id?: string;
      type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';
      text?: string;
    }>;
  }, callback?: (buttonId: string) => void): void;
  showAlert(message: string, callback?: () => void): void;
  showConfirm(message: string, callback?: (confirmed: boolean) => void): void;
}

declare global {
  interface Window {
    Telegram: {
      WebApp: TelegramWebApp;
    };
  }
}

export class TelegramAPI {
  private static instance: TelegramAPI;
  private webApp: TelegramWebApp;
  private isRealTelegram: boolean;

  private constructor() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã –≤ Telegram
    this.isRealTelegram = this.checkIfRealTelegram();
    
    if (this.isRealTelegram) {
      this.webApp = window.Telegram.WebApp;
      this.initializeWebApp();
      console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.');
      this.webApp = this.createMockWebApp();
    }
  }

  static getInstance(): TelegramAPI {
    if (!TelegramAPI.instance) {
      TelegramAPI.instance = new TelegramAPI();
    }
    return TelegramAPI.instance;
  }

  private checkIfRealTelegram(): boolean {
    // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Telegram
    return (
      typeof window !== 'undefined' &&
      window.Telegram?.WebApp &&
      window.Telegram.WebApp.platform !== undefined &&
      window.Telegram.WebApp.version !== undefined &&
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram –µ—Å—Ç—å initData
      (window.Telegram.WebApp.initData?.length > 0 || 
       // –ò–ª–∏ —Ö–æ—Ç—è –±—ã –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ initDataUnsafe
       window.Telegram.WebApp.initDataUnsafe?.user)
    );
  }

  private initializeWebApp(): void {
    this.webApp.ready();
    this.webApp.expand();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    if (this.webApp.colorScheme === 'dark') {
      document.documentElement.classList.add('dark');
    }
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
    this.webApp.isClosingConfirmationEnabled = false;
  }

  private createMockWebApp(): TelegramWebApp {
    return {
      initData: '',
      initDataUnsafe: {},
      version: '6.0',
      platform: 'web',
      colorScheme: 'light',
      themeParams: {},
      isExpanded: true,
      viewportHeight: window.innerHeight,
      viewportStableHeight: window.innerHeight,
      isClosingConfirmationEnabled: false,
      isVerticalSwipesEnabled: true,
      headerColor: '#ffffff',
      backgroundColor: '#ffffff',
      BackButton: {
        isVisible: false,
        show: () => console.log('üîÑ BackButton.show()'),
        hide: () => console.log('üîÑ BackButton.hide()'),
        onClick: (callback: () => void) => console.log('üîÑ BackButton.onClick()'),
        offClick: (callback: () => void) => console.log('üîÑ BackButton.offClick()'),
      },
      MainButton: {
        text: '',
        color: '#2481cc',
        textColor: '#ffffff',
        isVisible: false,
        isActive: true,
        setText: (text: string) => console.log('üîÑ MainButton.setText():', text),
        onClick: (callback: () => void) => console.log('üîÑ MainButton.onClick()'),
        offClick: (callback: () => void) => console.log('üîÑ MainButton.offClick()'),
        show: () => console.log('üîÑ MainButton.show()'),
        hide: () => console.log('üîÑ MainButton.hide()'),
        enable: () => console.log('üîÑ MainButton.enable()'),
        disable: () => console.log('üîÑ MainButton.disable()'),
        showProgress: () => console.log('üîÑ MainButton.showProgress()'),
        hideProgress: () => console.log('üîÑ MainButton.hideProgress()'),
      },
      ready: () => console.log('üîÑ WebApp.ready()'),
      expand: () => console.log('üîÑ WebApp.expand()'),
      close: () => console.log('üîÑ WebApp.close()'),
      sendData: (data: string) => console.log('üîÑ WebApp.sendData() [MOCK]:', data),
      showPopup: (params, callback) => {
        console.log('üîÑ WebApp.showPopup() [MOCK]:', params);
        if (callback) callback('ok');
      },
      showAlert: (message, callback) => {
        console.log('üîÑ WebApp.showAlert() [MOCK]:', message);
        alert(`[MOCK TELEGRAM] ${message}`);
        if (callback) callback();
      },
      showConfirm: (message, callback) => {
        console.log('üîÑ WebApp.showConfirm() [MOCK]:', message);
        const result = confirm(`[MOCK TELEGRAM] ${message}`);
        if (callback) callback(result);
      },
    };
  }

  getWebApp(): TelegramWebApp {
    return this.webApp;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
  showMainButton(text: string, callback: () => void): void {
    const mainButton = this.webApp.MainButton;
    mainButton.setText(text);
    mainButton.onClick(callback);
    mainButton.show();
  }

  hideMainButton(): void {
    this.webApp.MainButton.hide();
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  showBackButton(callback: () => void): void {
    const backButton = this.webApp.BackButton;
    backButton.onClick(callback);
    backButton.show();
  }

  hideBackButton(): void {
    this.webApp.BackButton.hide();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç - –ò–°–ü–†–ê–í–õ–ï–ù–û
  sendDataToBot(data: any): void {
    const jsonData = JSON.stringify(data);
    
    if (!this.isRealTelegram) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!');
      console.log('üì§ –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:', data);
      alert(`‚ùå –ù–µ –≤ Telegram!\n\n–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.`);
      return;
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É:', data);
    this.webApp.sendData(jsonData);
  }

  // –ü–æ–∫–∞–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
  showAlert(message: string): Promise<void> {
    return new Promise((resolve) => {
      if (!this.isRealTelegram) {
        alert(`[–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò] ${message}`);
        resolve();
        return;
      }
      this.webApp.showAlert(message, () => resolve());
    });
  }

  showConfirm(message: string): Promise<boolean> {
    return new Promise((resolve) => {
      if (!this.isRealTelegram) {
        const result = confirm(`[–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò] ${message}`);
        resolve(result);
        return;
      }
      this.webApp.showConfirm(message, (confirmed) => resolve(confirmed));
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
  isInTelegram(): boolean {
    return this.isRealTelegram;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserData() {
    return this.webApp.initDataUnsafe.user || null;
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  close(): void {
    this.webApp.close();
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getDebugInfo() {
    return {
      isRealTelegram: this.isRealTelegram,
      platform: this.webApp.platform,
      version: this.webApp.version,
      hasInitData: !!this.webApp.initData,
      hasUser: !!this.webApp.initDataUnsafe?.user,
      colorScheme: this.webApp.colorScheme
    };
  }
}

export default TelegramAPI;
