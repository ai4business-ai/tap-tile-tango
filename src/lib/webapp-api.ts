// src/lib/webapp-api.ts - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º API

interface SubmitHomeworkParams {
  taskId: string;
  userAnswer: string;
}

interface AnswerWebAppQueryParams {
  queryId: string;
  result: string;
}

export class WebAppAPIService {
  private apiUrl: string;
  private initData: string;

  constructor(apiUrl: string = 'https://your-server.com/api') {
    this.apiUrl = apiUrl;
    this.initData = window.Telegram?.WebApp?.initData || '';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
   */
  async submitHomework(params: SubmitHomeworkParams): Promise<any> {
    try {
      const response = await fetch(`${this.apiUrl}/submit-homework`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-Init-Data': this.initData
        },
        body: JSON.stringify(params)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error submitting homework:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ WebApp query (–¥–ª—è inline buttons)
   */
  async answerWebAppQuery(params: AnswerWebAppQueryParams): Promise<any> {
    try {
      const response = await fetch(`${this.apiUrl}/answer-webapp-query`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-Init-Data': this.initData
        },
        body: JSON.stringify(params)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error answering webapp query:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è query_id –¥–ª—è inline mode
   */
  hasQueryId(): boolean {
    return !!window.Telegram?.WebApp?.initDataUnsafe?.query_id;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ query_id
   */
  getQueryId(): string | null {
    return window.Telegram?.WebApp?.initDataUnsafe?.query_id || null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  getUserInfo() {
    return window.Telegram?.WebApp?.initDataUnsafe?.user || null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const webAppAPI = new WebAppAPIService();

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö—É–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API
export const useTaskDetailWithAPI = () => {
  const navigate = useNavigate();
  const [userAnswer, setUserAnswer] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [checkResult, setCheckResult] = useState<CheckResult | null>(null);
  const [telegramAPI, setTelegramAPI] = useState<TelegramAPI | null>(null);

  useEffect(() => {
    const tg = TelegramAPI.getInstance();
    setTelegramAPI(tg);

    tg.showBackButton(() => {
      navigate('/tasks/data-analysis');
    });

    return () => {
      tg.hideBackButton();
      tg.hideMainButton();
    };
  }, [navigate]);

  const handleSubmitHomework = async () => {
    if (!telegramAPI) {
      console.error('‚ùå TelegramAPI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    if (!userAnswer.trim()) {
      await telegramAPI.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
      return;
    }

    setIsSubmitting(true);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ query_id –¥–ª—è inline mode
      if (webAppAPI.hasQueryId()) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º answerWebAppQuery —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        const queryId = webAppAPI.getQueryId();
        const result = `üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–ó–∞–¥–∞–Ω–∏–µ: –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ SQL\n\n–û—Ç–≤–µ—Ç:\n${userAnswer.substring(0, 200)}...`;
        
        await webAppAPI.answerWebAppQuery({
          queryId: queryId!,
          result: result
        });
        
        await telegramAPI.showAlert('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º.');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp
        setTimeout(() => {
          window.Telegram?.WebApp?.close();
        }, 1500);
        
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const response = await webAppAPI.submitHomework({
          taskId: 'cohort-analysis-sql',
          userAnswer: userAnswer
        });
        
        if (response.success) {
          await telegramAPI.showAlert('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.');
        }
      }

    } catch (error) {
      console.error('‚ùå Error submitting homework:', error);
      await telegramAPI.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    userAnswer,
    setUserAnswer,
    isSubmitting,
    checkResult,
    handleSubmitHomework,
  };
};
