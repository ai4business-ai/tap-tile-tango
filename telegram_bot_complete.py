# telegram_bot_complete.py - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

import asyncio
import json
import logging
import os
import urllib.parse
from datetime import datetime
from typing import Dict, Any
from dotenv import load_dotenv

import openai
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardMarkup, 
    WebAppInfo,
    InlineQueryResultArticle,
    InputTextMessageContent
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes, 
    filters,
    InlineQueryHandler,
    CallbackQueryHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://tap-tile-tango.onrender.com')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

class TrainingBot:
    def __init__(self):
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
        self.materials = {
            'cohort-analysis-sql': {
                'table_url': 'https://docs.google.com/spreadsheets/d/1example123/export?format=xlsx',
                'table_filename': 'cohort_analysis_data.xlsx',
                'course_url': 'https://sqlcourse.example.com/cohort-analysis',
                'description': '–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
            }
        }

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep links"""
        user = update.effective_user
        args = context.args
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep links
        if args:
            command = args[0]
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if command == 'download_table_cohort':
                await self.send_download_table_button(update)
                return
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–∞
            elif command == 'open_course_sql':
                await self.send_course_button(update)
                return
            
            # –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ deep link
            elif command.startswith('hw_'):
                parts = command.split('_', 2)
                if len(parts) == 3:
                    _, task_id, encoded_answer = parts
                    user_answer = urllib.parse.unquote(encoded_answer)
                    
                    await self.process_homework_submission(
                        update, 
                        task_id, 
                        user_answer
                    )
                    return
        
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(update)

    async def show_main_menu(self, update: Update):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫
        keyboard = [
            # WebApp —á–µ—Ä–µ–∑ ReplyKeyboard (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç sendData)
            [KeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä (Keyboard)", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )],
            # Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è WebApp (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç query_id)
            [KeyboardButton("üìù –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É (Inline)")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_text = f"""
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –¢—Ä–µ–Ω–∞–∂–µ—Ä!</b>

–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–µ —Å –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.

<b>üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ò–ò
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

<b>üì± –°–ø–æ—Å–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ <b>Keyboard WebApp</b> - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ <b>Inline WebApp</b> - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def send_homework_inline_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–∫–∏"""
        if update.message.text == "üìù –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É (Inline)":
            keyboard = [[
                InlineKeyboardButton(
                    "üìù –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–º–∞—à–∫–∏", 
                    web_app=WebAppInfo(url=f"{MINI_APP_URL}?mode=homework")
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App (—Ç–æ–ª—å–∫–æ –¥–ª—è Keyboard WebApp)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
            web_app_data = update.message.web_app_data.data
            data = json.loads(web_app_data)
            
            user_id = update.effective_user.id
            action = data.get('action')
            
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}")
            
            if action == 'download_table':
                await self.send_download_table_button(update)
            elif action == 'open_course':
                await self.send_course_button(update)
            elif action == 'submit_homework':
                task_id = data.get('taskId')
                user_answer = data.get('userAnswer')
                await self.process_homework_submission(update, task_id, user_answer)
            else:
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def send_download_table_button(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        material = self.materials['cohort-analysis-sql']
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìä –°–∫–∞—á–∞—Ç—å {material['table_filename']}", 
                url=material['table_url']
            )],
            [InlineKeyboardButton(
                "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"""
üìä <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã!</b>

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {material['description']}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å" –Ω–∏–∂–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets  
3. –ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        """
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def send_course_button(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫—É—Ä—Å–∞"""
        material = self.materials['cohort-analysis-sql']
        
        keyboard = [
            [InlineKeyboardButton(
                "üéì –û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å SQL", 
                url=material['course_url']
            )],
            [InlineKeyboardButton(
                "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """
üéì <b>–û–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å –≥–æ—Ç–æ–≤!</b>

<b>–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –û—Å–Ω–æ–≤—ã SQL –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏  
‚Ä¢ –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPT –¥–ª—è SQL

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å üëá
        """
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def process_homework_submission(self, update: Update, task_id: str, user_answer: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        processing_message = await update.message.reply_text(
            "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥"
        )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ OpenAI
            result = await self.check_homework_with_openai(task_id, user_answer)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await processing_message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.send_homework_result(update, result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑."
            )

    async def check_homework_with_openai(self, task_id: str, user_answer: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI"""
        try:
            response = await openai.ChatCompletion.acreate(
                model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ SQL. 
                        –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 100.
                        –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
                        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"score": —á–∏—Å–ª–æ, "feedback": "—Ç–µ–∫—Å—Ç", "suggestions": ["—Å–æ–≤–µ—Ç1", "—Å–æ–≤–µ—Ç2"]}"""
                    },
                    {
                        "role": "user",
                        "content": f"–ó–∞–¥–∞–Ω–∏–µ: {task_id}\n\n–û—Ç–≤–µ—Ç:\n{user_answer}"
                    }
                ],
                temperature=0.7
            )
            
            result_text = response.choices[0].message.content
            result = json.loads(result_text)
            
            return {
                'score': result.get('score', 75),
                'feedback': result.get('feedback', '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!'),
                'suggestions': result.get('suggestions', [])
            }
            
        except Exception as e:
            logger.error(f"OpenAI error: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                'score': 85,
                'feedback': '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
                'suggestions': ['–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!']
            }

    async def send_homework_result(self, update: Update, result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        score = result['score']
        feedback = result['feedback']
        suggestions = result.get('suggestions', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –æ—Ü–µ–Ω–∫–µ
        if score >= 90:
            emoji = "üèÜ"
            status = "–û—Ç–ª–∏—á–Ω–æ!"
        elif score >= 80:
            emoji = "‚≠ê"
            status = "–•–æ—Ä–æ—à–æ!"
        elif score >= 60:
            emoji = "üëç"
            status = "–ù–µ–ø–ª–æ—Ö–æ"
        else:
            emoji = "üìö"
            status = "–ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å"
        
        message = f"""
{emoji} <b>{status}</b>

üéØ <b>–û—Ü–µ–Ω–∫–∞: {score}/100</b>

üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>
{feedback}
        """
        
        if suggestions:
            message += "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for i, suggestion in enumerate(suggestions, 1):
                message += f"{i}. {suggestion}\n"
        
        keyboard = [[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            InlineKeyboardButton("üìö –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="new_task")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.show_main_menu(query)
        elif query.data == "new_task":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º WebApp –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            keyboard = [[
                InlineKeyboardButton(
                    "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä", 
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TrainingBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        bot.send_homework_inline_button
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
    application.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, 
        bot.handle_web_app_data
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.handle_callback_query))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üì± Mini App URL: {MINI_APP_URL}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
